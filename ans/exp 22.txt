//exp 22

Table Creation
sql
Copy code
-- Create Time Table
CREATE TABLE Time (
    tid INT PRIMARY KEY,
    date DATE,
    t_month INT CHECK (t_month BETWEEN 1 AND 12),
    t_year INT CHECK (t_year > 0)
);

-- Create Location Table
CREATE TABLE Location (
    lid INT PRIMARY KEY,
    city VARCHAR(100),
    state VARCHAR(100)
);

-- Create Product Table
CREATE TABLE Product (
    pid INT PRIMARY KEY,
    pname VARCHAR(100),
    category VARCHAR(100),
    price DECIMAL(10, 2) CHECK (price > 0) -- Add constraint for price
);

-- Create Sales Table
CREATE TABLE Sales (
    tid INT,
    lid INT,
    pid INT,
    s_sales INT,
    PRIMARY KEY (tid, lid, pid),
    FOREIGN KEY (tid) REFERENCES Time(tid),
    FOREIGN KEY (lid) REFERENCES Location(lid),
    FOREIGN KEY (pid) REFERENCES Product(pid)
);
Sample Data Insertion
sql
Copy code
-- Insert data into Time table
INSERT INTO Time (tid, date, t_month, t_year)
VALUES (1, '2024-01-15', 1, 2024),
       (2, '2024-02-20', 2, 2024),
       (3, '2024-03-10', 3, 2024),
       (4, '2024-04-05', 4, 2024),
       (5, '2024-05-25', 5, 2024);

-- Insert data into Location table
INSERT INTO Location (lid, city, state)
VALUES (1, 'Mumbai', 'Maharashtra'),
       (2, 'Delhi', 'Delhi'),
       (3, 'Bangalore', 'Karnataka'),
       (4, 'Indore', 'Madhya Pradesh'),
       (5, 'Ahmedabad', 'Gujarat');

-- Insert data into Product table
INSERT INTO Product (pid, pname, category, price)
VALUES (1, 'Product A', 'Electronics', 350.00),
       (2, 'Product B', 'Clothing', 150.00),
       (3, 'Product C', 'Electronics', 800.00),
       (4, 'Product D', 'Furniture', 500.00),
       (5, 'Product E', 'Grocery', 100.00),
       (6, 'Product F', 'Electronics', 600.00);

-- Insert data into Sales table
INSERT INTO Sales (tid, lid, pid, s_sales)
VALUES (1, 1, 1, 600),
       (2, 2, 2, 200),
       (3, 3, 3, 700),
       (4, 4, 4, 800),
       (5, 5, 5, 300),
       (1, 1, 6, 100);
Queries
Find the product name whose price is greater than 300.

sql
Copy code
SELECT pname
FROM Product
WHERE price > 300;
Find the total sales for each city.

sql
Copy code
SELECT l.city, SUM(s.s_sales) AS total_sales
FROM Location l
JOIN Sales s ON l.lid = s.lid
GROUP BY l.city;
Display the location details whose state name includes the substring "Ind".

sql
Copy code
SELECT *
FROM Location
WHERE state LIKE '%Ind%';
Display average price of product for each category.

sql
Copy code
SELECT category, AVG(price) AS average_price
FROM Product
GROUP BY category;
Display names of products having sales more than 500.

sql
Copy code
SELECT p.pname
FROM Product p
JOIN Sales s ON p.pid = s.pid
WHERE s.s_sales > 500;
Display the products along with price from highest to lowest.

sql
Copy code
SELECT pname, price
FROM Product
ORDER BY price DESC;
Find the 2nd highest product by total sales.

sql
Copy code
SELECT pname
FROM Product
WHERE pid IN (
    SELECT pid
    FROM Sales
    GROUP BY pid
    ORDER BY SUM(s_sales) DESC
    LIMIT 1 OFFSET 1
);
Create a view for finding total sales by month for each city.

sql
Copy code
CREATE VIEW MonthlySalesByCity AS
SELECT t.t_month, l.city, SUM(s.s_sales) AS total_sales
FROM Time t
JOIN Sales s ON t.tid = s.tid
JOIN Location l ON s.lid = l.lid
GROUP BY t.t_month, l.city;
Display product names whose price is greater than the average price of products.

sql
Copy code
SELECT pname
FROM Product
WHERE price > (SELECT AVG(price) FROM Product);
Create stored procedure to reduce the price of a product (user-specified) for a specific product (user-specified).

sql
Copy code
CREATE PROCEDURE ReduceProductPrice(IN product_id INT, IN reduction_amount DECIMAL(10, 2))
BEGIN
    UPDATE Product
    SET price = price - reduction_amount
    WHERE pid = product_id;
END;