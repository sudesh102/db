//exp 1
CREATE TABLE Book (
    bookno INT PRIMARY KEY,
    bookname VARCHAR(255),
    author VARCHAR(255),
    title VARCHAR(255),
    price DECIMAL(10, 2) CHECK (price > 250),
    pages INT
);

-- Create Bookorder table
CREATE TABLE Bookorder (
    vendorno INT,
    bookno INT,
    orderno INT PRIMARY KEY,
    copies INT,
    orderdate DATE,
    FOREIGN KEY (vendorno) REFERENCES Vendor(vendorno),
    FOREIGN KEY (bookno) REFERENCES Book(bookno)
);

-- Create Vendor table
CREATE TABLE Vendor (
    vendorno INT PRIMARY KEY,
    vendorname VARCHAR(255)
);

-- Create Member table
CREATE TABLE Member (
    borrowno INT PRIMARY KEY,
    name VARCHAR(255),
    address VARCHAR(255)
);

-- Create Bookissue table
CREATE TABLE Bookissue (
    bookno INT,
    borrowno INT,
    issuedate DATE,
    FOREIGN KEY (bookno) REFERENCES Book(bookno),
    FOREIGN KEY (borrowno) REFERENCES Member(borrowno)
);

-- Create Bookreturn table
CREATE TABLE Bookreturn (
    bookno INT,
    borrowno INT,
    returndate DATE,
    FOREIGN KEY (bookno) REFERENCES Book(bookno),
    FOREIGN KEY (borrowno) REFERENCES Member(borrowno)
);
SQL Queries:
Display all vendor names in descending order of the number of copies.

sql
Copy code
SELECT v.vendorname
FROM Vendor v
JOIN Bookorder bo ON v.vendorno = bo.vendorno
GROUP BY v.vendorname
ORDER BY SUM(bo.copies) DESC;
Display member names of members who have both borrowed and issued a book.

sql
Copy code
SELECT m.name
FROM Member m
JOIN Bookissue bi ON m.borrowno = bi.borrowno;
Display the average price of each book.

sql
Copy code
SELECT bookname, AVG(price) AS avg_price
FROM Book
GROUP BY bookname;
Display names of books whose price is greater than 700.

sql
Copy code
SELECT bookname
FROM Book
WHERE price > 700;
Display book details where the name starts with 'k' and has at least 4 characters.

sql
Copy code
SELECT *
FROM Book
WHERE bookname LIKE 'k%' AND LENGTH(bookname) >= 4;
Set price to 300 when pages are more than 300.

sql
Copy code
UPDATE Book
SET price = 300
WHERE pages > 300;
Find the average price of each book and display books with an average price greater than 500.

sql
Copy code
SELECT bookname, AVG(price) AS avg_price
FROM Book
GROUP BY bookname
HAVING AVG(price) > 500;
Find all book numbers whose book order copies are greater than the average number of copies of each book.

sql
Copy code
SELECT bo.bookno
FROM Bookorder bo
GROUP BY bo.bookno
HAVING SUM(bo.copies) > (SELECT AVG(copies) FROM Bookorder);
Create a view of book names by their issue date.

sql
Copy code
CREATE VIEW BookByIssueDate AS
SELECT b.bookname, bi.issuedate
FROM Book b
JOIN Bookissue bi ON b.bookno = bi.bookno;
Create a stored procedure to remove a specified number of book copies from a specific book.

sql
Copy code
DELIMITER //
CREATE PROCEDURE RemoveBookCopies(IN bookID INT, IN numCopies INT)
BEGIN
   UPDATE Bookorder
   SET copies = copies - numCopies
   WHERE bookno = bookID;
END //
DELIMITER ;
These SQL commands should cover the structure of the tables and the required queries. Let me know if you need further modifications!






You said:
if insert values are require then take the values also
ChatGPT said:
ChatGPT
Sure! Here are the SQL insert statements with example values for each of the tables:

Insert Values:
Book Table:

sql
Copy code
INSERT INTO Book (bookno, bookname, author, title, price, pages)
VALUES 
(1, 'Learning SQL', 'Alan Beaulieu', 'SQL Guide', 350, 200),
(2, 'Python Basics', 'David Amos', 'Introduction to Python', 500, 320),
(3, 'Java Programming', 'Herbert Schildt', 'Complete Reference', 750, 400),
(4, 'Data Science 101', 'Jake VanderPlas', 'Data Science Handbook', 900, 280),
(5, 'Kotlin in Action', 'Dmitry Jemerov', 'Kotlin Programming', 720, 330);
Bookorder Table:

sql
Copy code
INSERT INTO Bookorder (vendorno, bookno, orderno, copies, orderdate)
VALUES 
(1, 1, 1001, 50, '2024-01-15'),
(1, 2, 1002, 30, '2024-02-10'),
(2, 3, 1003, 60, '2024-03-05'),
(3, 4, 1004, 40, '2024-04-20'),
(3, 5, 1005, 70, '2024-05-12');
Vendor Table:

sql
Copy code
INSERT INTO Vendor (vendorno, vendorname)
VALUES 
(1, 'TechBooks Supplier'),
(2, 'CodeWorld Publishers'),
(3, 'SciTech Distributors');
Member Table:

sql
Copy code
INSERT INTO Member (borrowno, name, address)
VALUES 
(101, 'John Doe', '123 Elm Street'),
(102, 'Jane Smith', '456 Oak Avenue'),
(103, 'Emily Johnson', '789 Pine Road');
Bookissue Table:

sql
Copy code
INSERT INTO Bookissue (bookno, borrowno, issuedate)
VALUES 
(1, 101, '2024-06-01'),
(2, 102, '2024-06-15'),
(3, 103, '2024-07-10'),
(4, 101, '2024-07-20'),
(5, 102, '2024-08-05');
Bookreturn Table:

sql
Copy code
INSERT INTO Bookreturn (bookno, borrowno, returndate)
VALUES 
(1, 101, '2024-06-10'),
(2, 102, '2024-06-25'),
(3, 103, '2024-07-20'),
(4, 101, '2024-08-01'),
(5, 102, '2024-08-15');